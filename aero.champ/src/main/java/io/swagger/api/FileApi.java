/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "file", description = "the file API")
public interface FileApi {

    @ApiOperation(value = "Delete a file.", nickname = "deleteFile", notes = "Update a file in the given path.", tags={ "file-service-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "File deleted"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Resource to delete not found") })
    @RequestMapping(value = "/file/**/{file}.{ext}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFile(@ApiParam(value = "full path where the file will be retrieved",required=true) @PathVariable("file") String file,@ApiParam(value = "extension of the file",required=true) @PathVariable("ext") String ext);


    @ApiOperation(value = "Get a file.", nickname = "getFile", notes = "Get a single file given the full URL path and filename with extension.", response = Resource.class, tags={ "file-service-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "File download successful.", response = Resource.class),
        @ApiResponse(code = 204, message = "No content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/file/**/{file}.{ext}",
        method = RequestMethod.GET)
    ResponseEntity<Resource> getFile(@ApiParam(value = "full path where the file will be retrieved",required=true) @PathVariable("file") String file,@ApiParam(value = "extension of the file",required=true) @PathVariable("ext") String ext,@ApiParam(value = "scale to render image") @Valid @RequestParam(value = "scaleSize", required = false) Integer scaleSize);


    @ApiOperation(value = "Upload a file.", nickname = "uploadFile", notes = "Upload a file and save it in the given path.", tags={ "file-service-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "File created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/file/**",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<Void> uploadFile(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file);

}
